{"ast":null,"code":"import _objectSpread from\"/Users/nicklankau/life-tracker/SolaceOS/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{DragDropContext,Droppable,Draggable}from'react-beautiful-dnd';import apiService from'../apiService';import'./TaskView.css';import{useCalendar}from'./CalendarContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TaskView=()=>{const{selectedDate,setSelectedDate}=useCalendar();const[newTask,setNewTask]=useState(\"\");const[tasksByDate,setTasksByDate]=useState({});const formatDateToYYYYMMDD=date=>{const utcDate=new Date(Date.UTC(date.getFullYear(),date.getMonth(),date.getDate()));return utcDate.toISOString().split('T')[0];};const getStartOfWeek=date=>{const day=date.getDay();const diff=date.getDate()-(day===0?6:day-1);return new Date(date.setDate(diff));};const generateWeekDates=startOfWeek=>{const weekDates=[];for(let i=0;i<7;i++){const date=new Date(startOfWeek);date.setDate(startOfWeek.getDate()+i);weekDates.push(date);}return weekDates;};const fetchTasksForWeek=async weekDates=>{const tasksByDateTemp={};for(const date of weekDates){const formattedDate=formatDateToYYYYMMDD(date);try{const tasks=await apiService.getTasksByDate(formattedDate);tasksByDateTemp[formattedDate]=tasks.sort((a,b)=>a.order-b.order);}catch(error){console.error(\"Error fetching tasks for date \".concat(formattedDate,\":\"),error);}}setTasksByDate(tasksByDateTemp);};useEffect(()=>{const correctedDate=new Date(selectedDate);correctedDate.setDate(correctedDate.getDate()+1);const startOfWeek=getStartOfWeek(correctedDate);const weekDates=generateWeekDates(startOfWeek);fetchTasksForWeek(weekDates);},[selectedDate]);const handleAddTask=async date=>{if(newTask.trim()){const formattedDate=formatDateToYYYYMMDD(date);try{var _tasksByDate$formatte;const taskData={name:newTask,completed:false,date:formattedDate,order:((_tasksByDate$formatte=tasksByDate[formattedDate])===null||_tasksByDate$formatte===void 0?void 0:_tasksByDate$formatte.length)||0// Use the length of tasks as the order\n};const response=await apiService.addTask(taskData);setTasksByDate(prevTasksByDate=>_objectSpread(_objectSpread({},prevTasksByDate),{},{[formattedDate]:[...(prevTasksByDate[formattedDate]||[]),response]}));setNewTask(\"\");}catch(error){console.error('Error adding task:',error);}}};const handleToggleCompletion=async(taskId,taskDate)=>{try{const updatedTask=await apiService.toggleTaskCompletion(taskId);setTasksByDate(prevTasksByDate=>_objectSpread(_objectSpread({},prevTasksByDate),{},{[taskDate]:prevTasksByDate[taskDate].map(task=>task.id===taskId?updatedTask:task)}));}catch(error){console.error('Error toggling task completion:',error);}};const handleDeleteTask=async(taskId,taskDate)=>{try{await apiService.deleteTask(taskId);setTasksByDate(prevTasksByDate=>_objectSpread(_objectSpread({},prevTasksByDate),{},{[taskDate]:prevTasksByDate[taskDate].filter(task=>task.id!==taskId)}));}catch(error){console.error('Error deleting task:',error);}};const onDragEnd=async(result,formattedDate)=>{if(!result.destination)return;// Reorder tasks in the local state\nconst reorderedTasks=Array.from(tasksByDate[formattedDate]);const[movedTask]=reorderedTasks.splice(result.source.index,1);reorderedTasks.splice(result.destination.index,0,movedTask);// Update the order of each task in the reordered list\nconst updatedTasks=reorderedTasks.map((task,index)=>_objectSpread(_objectSpread({},task),{},{order:index// Update the order based on the new index\n}));// Update the local state with the reordered tasks\nsetTasksByDate(prevTasksByDate=>_objectSpread(_objectSpread({},prevTasksByDate),{},{[formattedDate]:updatedTasks}));// Persist the new order to the backend by updating the order of each task\ntry{await Promise.all(updatedTasks.map(task=>apiService.updateTaskOrder(task.id,task.order)));console.log('Task order updated successfully');}catch(error){console.error('Error updating task order:',error);}};const navigateWeek=direction=>{const newDate=new Date(selectedDate);newDate.setDate(newDate.getDate()+(direction==='next'?7:-7));setSelectedDate(formatDateToYYYYMMDD(newDate));};const resetToToday=()=>{setSelectedDate(formatDateToYYYYMMDD(new Date()));};const correctedDate=new Date(selectedDate);correctedDate.setDate(correctedDate.getDate()+1);const startOfWeek=getStartOfWeek(correctedDate);const weekDates=generateWeekDates(startOfWeek);return/*#__PURE__*/_jsxs(\"div\",{className:\"task-view-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"task-view-controls\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigateWeek('previous'),children:\"Previous Week\"}),/*#__PURE__*/_jsx(\"button\",{onClick:resetToToday,children:\"Reset to Today\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigateWeek('next'),children:\"Next Week\"})]}),/*#__PURE__*/_jsx(\"h2\",{children:\"Week of \".concat(startOfWeek.toLocaleDateString('en-US',{month:'long',day:'numeric',year:'numeric'}))}),/*#__PURE__*/_jsx(\"div\",{className:\"task-table\",children:weekDates.map((date,index)=>{const formattedDate=formatDateToYYYYMMDD(date);const tasks=tasksByDate[formattedDate]||[];return/*#__PURE__*/_jsxs(\"div\",{className:\"task-table-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"task-table-cell date-cell\",children:[date.toLocaleDateString('en-US',{weekday:'short'}).charAt(0),/*#__PURE__*/_jsx(\"br\",{}),date.getDate()]}),/*#__PURE__*/_jsxs(\"div\",{className:\"task-table-cell tasks-cell\",children:[/*#__PURE__*/_jsx(DragDropContext,{onDragEnd:result=>onDragEnd(result,formattedDate),children:/*#__PURE__*/_jsx(Droppable,{droppableId:formattedDate,children:provided=>/*#__PURE__*/_jsxs(\"ul\",_objectSpread(_objectSpread({className:\"task-list\"},provided.droppableProps),{},{ref:provided.innerRef,children:[tasks.map((task,taskIndex)=>/*#__PURE__*/_jsx(Draggable,{draggableId:task.id.toString(),index:taskIndex,children:provided=>/*#__PURE__*/_jsxs(\"li\",_objectSpread(_objectSpread(_objectSpread({className:\"task-item \".concat(task.completed?'completed':''),ref:provided.innerRef},provided.draggableProps),provided.dragHandleProps),{},{children:[/*#__PURE__*/_jsx(\"span\",{onClick:()=>handleToggleCompletion(task.id,formattedDate),children:task.name}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDeleteTask(task.id,formattedDate),className:\"delete-task-button\",\"aria-label\":\"Delete task\",children:\"\\u274C\"})]}))},task.id)),provided.placeholder]}))})}),/*#__PURE__*/_jsxs(\"div\",{className:\"task-input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newTask,onChange:e=>setNewTask(e.target.value),placeholder:\"Enter a new task...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAddTask(date),children:\"Add Task\"})]})]})]},index);})})]});};export default TaskView;","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","apiService","useCalendar","jsx","_jsx","jsxs","_jsxs","TaskView","selectedDate","setSelectedDate","newTask","setNewTask","tasksByDate","setTasksByDate","formatDateToYYYYMMDD","date","utcDate","Date","UTC","getFullYear","getMonth","getDate","toISOString","split","getStartOfWeek","day","getDay","diff","setDate","generateWeekDates","startOfWeek","weekDates","i","push","fetchTasksForWeek","tasksByDateTemp","formattedDate","tasks","getTasksByDate","sort","a","b","order","error","console","concat","correctedDate","handleAddTask","trim","_tasksByDate$formatte","taskData","name","completed","length","response","addTask","prevTasksByDate","_objectSpread","handleToggleCompletion","taskId","taskDate","updatedTask","toggleTaskCompletion","map","task","id","handleDeleteTask","deleteTask","filter","onDragEnd","result","destination","reorderedTasks","Array","from","movedTask","splice","source","index","updatedTasks","Promise","all","updateTaskOrder","log","navigateWeek","direction","newDate","resetToToday","className","children","onClick","toLocaleDateString","month","year","weekday","charAt","droppableId","provided","droppableProps","ref","innerRef","taskIndex","draggableId","toString","draggableProps","dragHandleProps","placeholder","type","value","onChange","e","target"],"sources":["/Users/nicklankau/life-tracker/SolaceOS/frontend/src/components/TaskView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport apiService from '../apiService';\nimport './TaskView.css';\nimport { useCalendar } from './CalendarContext';\n\nconst TaskView = () => {\n    const { selectedDate, setSelectedDate } = useCalendar();\n    const [newTask, setNewTask] = useState(\"\");\n    const [tasksByDate, setTasksByDate] = useState({});\n\n    const formatDateToYYYYMMDD = (date) => {\n        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n        return utcDate.toISOString().split('T')[0];\n    };\n\n    const getStartOfWeek = (date) => {\n        const day = date.getDay();\n        const diff = date.getDate() - (day === 0 ? 6 : day - 1);\n        return new Date(date.setDate(diff));\n    };\n\n    const generateWeekDates = (startOfWeek) => {\n        const weekDates = [];\n        for (let i = 0; i < 7; i++) {\n            const date = new Date(startOfWeek);\n            date.setDate(startOfWeek.getDate() + i);\n            weekDates.push(date);\n        }\n        return weekDates;\n    };\n\n    const fetchTasksForWeek = async (weekDates) => {\n        const tasksByDateTemp = {};\n        for (const date of weekDates) {\n            const formattedDate = formatDateToYYYYMMDD(date);\n            try {\n                const tasks = await apiService.getTasksByDate(formattedDate);\n                tasksByDateTemp[formattedDate] = tasks.sort((a, b) => a.order - b.order);\n            } catch (error) {\n                console.error(`Error fetching tasks for date ${formattedDate}:`, error);\n            }\n        }\n        setTasksByDate(tasksByDateTemp);\n    };\n\n    useEffect(() => {\n        const correctedDate = new Date(selectedDate);\n        correctedDate.setDate(correctedDate.getDate() + 1);\n        const startOfWeek = getStartOfWeek(correctedDate);\n        const weekDates = generateWeekDates(startOfWeek);\n        fetchTasksForWeek(weekDates);\n    }, [selectedDate]);\n\n    const handleAddTask = async (date) => {\n        if (newTask.trim()) {\n            const formattedDate = formatDateToYYYYMMDD(date);\n            try {\n                const taskData = {\n                    name: newTask,\n                    completed: false,\n                    date: formattedDate,\n                    order: tasksByDate[formattedDate]?.length || 0 // Use the length of tasks as the order\n                };\n                const response = await apiService.addTask(taskData);\n                setTasksByDate(prevTasksByDate => ({\n                    ...prevTasksByDate,\n                    [formattedDate]: [...(prevTasksByDate[formattedDate] || []), response]\n                }));\n                setNewTask(\"\");\n            } catch (error) {\n                console.error('Error adding task:', error);\n            }\n        }\n    };\n\n    const handleToggleCompletion = async (taskId, taskDate) => {\n        try {\n            const updatedTask = await apiService.toggleTaskCompletion(taskId);\n            setTasksByDate(prevTasksByDate => ({\n                ...prevTasksByDate,\n                [taskDate]: prevTasksByDate[taskDate].map(task =>\n                    task.id === taskId ? updatedTask : task\n                ),\n            }));\n        } catch (error) {\n            console.error('Error toggling task completion:', error);\n        }\n    };\n\n    const handleDeleteTask = async (taskId, taskDate) => {\n        try {\n            await apiService.deleteTask(taskId);\n            setTasksByDate(prevTasksByDate => ({\n                ...prevTasksByDate,\n                [taskDate]: prevTasksByDate[taskDate].filter(task => task.id !== taskId)\n            }));\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const onDragEnd = async (result, formattedDate) => {\n        if (!result.destination) return;\n\n        // Reorder tasks in the local state\n        const reorderedTasks = Array.from(tasksByDate[formattedDate]);\n        const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n        reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n        // Update the order of each task in the reordered list\n        const updatedTasks = reorderedTasks.map((task, index) => ({\n            ...task,\n            order: index // Update the order based on the new index\n        }));\n\n        // Update the local state with the reordered tasks\n        setTasksByDate(prevTasksByDate => ({\n            ...prevTasksByDate,\n            [formattedDate]: updatedTasks\n        }));\n\n        // Persist the new order to the backend by updating the order of each task\n        try {\n            await Promise.all(\n                updatedTasks.map(task => apiService.updateTaskOrder(task.id, task.order))\n            );\n            console.log('Task order updated successfully');\n        } catch (error) {\n            console.error('Error updating task order:', error);\n        }\n    };\n\n    const navigateWeek = (direction) => {\n        const newDate = new Date(selectedDate);\n        newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));\n        setSelectedDate(formatDateToYYYYMMDD(newDate));\n    };\n\n    const resetToToday = () => {\n        setSelectedDate(formatDateToYYYYMMDD(new Date()));\n    };\n\n    const correctedDate = new Date(selectedDate);\n    correctedDate.setDate(correctedDate.getDate() + 1);\n    const startOfWeek = getStartOfWeek(correctedDate);\n    const weekDates = generateWeekDates(startOfWeek);\n\n    return (\n        <div className=\"task-view-container\">\n            <div className=\"task-view-controls\">\n                <button onClick={() => navigateWeek('previous')}>Previous Week</button>\n                <button onClick={resetToToday}>Reset to Today</button>\n                <button onClick={() => navigateWeek('next')}>Next Week</button>\n            </div>\n            <h2>{`Week of ${startOfWeek.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}`}</h2>\n            <div className=\"task-table\">\n                {weekDates.map((date, index) => {\n                    const formattedDate = formatDateToYYYYMMDD(date);\n                    const tasks = tasksByDate[formattedDate] || [];\n                    return (\n                        <div className=\"task-table-row\" key={index}>\n                            <div className=\"task-table-cell date-cell\">\n                                {date.toLocaleDateString('en-US', { weekday: 'short' }).charAt(0)}\n                                <br />\n                                {date.getDate()}\n                            </div>\n                            <div className=\"task-table-cell tasks-cell\">\n                                <DragDropContext onDragEnd={(result) => onDragEnd(result, formattedDate)}>\n                                    <Droppable droppableId={formattedDate}>\n                                        {(provided) => (\n                                            <ul className=\"task-list\" {...provided.droppableProps} ref={provided.innerRef}>\n                                                {tasks.map((task, taskIndex) => (\n                                                    <Draggable key={task.id} draggableId={task.id.toString()} index={taskIndex}>\n                                                        {(provided) => (\n                                                            <li\n                                                                className={`task-item ${task.completed ? 'completed' : ''}`}\n                                                                ref={provided.innerRef}\n                                                                {...provided.draggableProps}\n                                                                {...provided.dragHandleProps}\n                                                            >\n                                                                <span onClick={() => handleToggleCompletion(task.id, formattedDate)}>\n                                                                    {task.name}\n                                                                </span>\n                                                                <button\n                                                                    onClick={() => handleDeleteTask(task.id, formattedDate)}\n                                                                    className=\"delete-task-button\"\n                                                                    aria-label=\"Delete task\"\n                                                                >\n                                                                    ❌\n                                                                </button>\n                                                            </li>\n                                                        )}\n                                                    </Draggable>\n                                                ))}\n                                                {provided.placeholder}\n                                            </ul>\n                                        )}\n                                    </Droppable>\n                                </DragDropContext>\n                                <div className=\"task-input-container\">\n                                    <input\n                                        type=\"text\"\n                                        value={newTask}\n                                        onChange={(e) => setNewTask(e.target.value)}\n                                        placeholder=\"Enter a new task...\"\n                                    />\n                                    <button onClick={() => handleAddTask(date)}>Add Task</button>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}